load bakery.maude

mod BAKERY+ is
	including BAKERY .
	protecting BOOL .

	vars N M T : Nat .
	var S : Mode .
	var C : Configuration .
	
	op containsTicket : Configuration Nat -> Bool .

	eq containsTicket(none, T) = false .
	eq containsTicket(< O : Dispenser | next: N, last: M > C, T) = 
		containsTicket(C, T) .
	eq containsTicket(< N : BProcess | mode: S, number: M > C, T) = 
		if M == T 
		then true     
		else containsTicket(C, T) fi .

	crl [drop_ticket] : 
		[[ < N : BProcess | mode: wait, number: M > C ]] 
		=> 
		[[ < N : BProcess | mode: sleep, number: 0 > C ]] 
		if M =/= 0 .
	crl [next_ticket] : 
		[[ < O : Dispenser | next: N, last: M > C ]] 
		=> 
		[[ < O : Dispenser | next: s(N), last: M > C ]] 
		if containsTicket(C, N) 
		/\ N < M . 
endm

mod ABSTRACT-BAKERY+ is 
	including NAT .
	including INT .
	including BAKERY+ .

	var M : Mode . 
	vars N N' X X' : Nat .
	vars C C' : Configuration .

	ceq [[ < O : Dispenser | next: s(N), last: s(N) > C ]] =
		[[ < O : Dispenser | next: N, last: N > C ]] 
		if N =/= 0 .
	ceq [[ < O : Dispenser | next: s(N), last: N' > 
		< X : BProcess | mode: M, number: s(N) > C ]] =
		[[ < O : Dispenser | next: N, last: N' > 
		< X : BProcess | mode: M, number: N > C ]] 
		if containsTicket(C, N) 
		/\ N =/= 0 .
	ceq [[ < O : Dispenser | next: N, last: s(N') > 
		< X : BProcess | mode: M, number: s(N') > C ]] =
		[[ < O : Dispenser | next: N, last: N' > 
		< X : BProcess | mode: M, number: N' > C ]] 
		if containsTicket(C, N') 
		/\ N' =/= 0 .
	ceq [[ < O : Dispenser | next: N, last: N' > 
		< X : BProcess | mode: M, number: s(X') > C ]] =
		[[ < O : Dispenser | next: N, last: N' > 
		< X : BProcess | mode: M, number: X' > C ]]
		if containsTicket(C, X') 
		/\ X' =/= 0 
		/\ N =/= s(X') 
		/\ N' =/= s(X') .
endm