load bakery.maude

mod BAKERY+ is
	including BAKERY .
	protecting BOOL .

	vars N M T : Nat .
	var S : Mode .
	var C : Configuration .
	
	op droppedTicket : Configuration Nat -> Bool .

	eq droppedTicket(none, T) = true .
	ceq droppedTicket(< O : Dispenser | next: N, last: M > C, T) 
		= droppedTicket(C, T) 
		if C =/= none .
	ceq droppedTicket(< N : BProcess | mode: S, number: M > C, T) 
	= if M == T then false else droppedTicket(C, T) fi 
	if C =/= none .

	crl [drop_ticket] : 
		[[ < N : BProcess | mode: wait, number: M > C ]] 
		=> 
		[[ < N : BProcess | mode: sleep, number: 0 > C ]] 
		if M =/= 0 .
	crl [next_ticket] : 
		[[ < O : Dispenser | next: N, last: M > C ]] 
		=> 
		[[ < O : Dispenser | next: s(N), last: M > C ]] 
		if droppedTicket(C, N) . 
endm

mod ABSTRACT-BAKERY+ is 
	including NAT .
	including INT .
	including BAKERY+ .

	var M : Mode . 
	vars N N' X : Nat .
	vars C C' : Configuration .

	op inf : -> Nat [ctor] .
	
	op minf : Nat Nat -> Nat .
	eq minf(N, inf) = N .
	eq minf(N,N') = min(N,N') .

	op min_ticket : Configuration -> Nat .
	eq min_ticket(none) = inf .
	eq min_ticket(< O : Dispenser | next: N, last: N' >) = inf .
	eq min_ticket(< N : BProcess | mode: M, number: 0 >) = inf .
	ceq min_ticket(< N : BProcess | mode: M, number: N' >) = N' if N' > 0  .
	ceq min_ticket(C C') = minf(min_ticket(C), min_ticket(C')) if C =/= none /\ C' =/= none .

	op max_ticket : Configuration -> Nat .
	eq max_ticket(none) = 0 .
	eq max_ticket(< O : Dispenser | next: N, last: N' >) = 0 .
	eq max_ticket(< N : BProcess | mode: M, number: N' >) = N' .
	ceq max_ticket(C C') = max(max_ticket(C), max_ticket(C')) 
		if C =/= none /\ C' =/= none .

	op collapse : Configuration Nat Nat -> Configuration .
	eq collapse(none, N, N') = none .
	eq collapse(< X : BProcess | mode: M, number: N > C, N, N') 
		= < X : BProcess | mode: M, number: N' > 
		collapse(C, min_ticket(C), s(N')) .

	op num_tickets : Configuration -> Nat .
	eq num_tickets(none) = 0 .
	eq num_tickets(< X : BProcess | mode: wait, number: N >) = 1 .
	eq num_tickets(< O : Dispenser | next: N, last: N' >) = 0 .
	ceq num_tickets(< X : BProcess | mode: M, number: N >) = 0 
		if M =/= wait .
	ceq num_tickets(C C') = num_tickets(C) + num_tickets(C') 
		if C =/= none /\ C' =/= none .

	ceq [[< O : Dispenser | next: N, last: N' > C ]]
		= [[< O : Dispenser | next: min_ticket(C'), last: max_ticket(C') > collapse(C, min_ticket(C), 1 ) ]] 
		if min_ticket(C) =/= inf
		/\ C' := collapse(C, min_ticket(C), 1)
		/\ ((max_ticket(C) - min_ticket(C)) + 1 > num_tickets(C) 
			or min_ticket(C) > 1) .
endm