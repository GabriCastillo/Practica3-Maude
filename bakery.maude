load model-checker.maude

mod BAKERY is
	protecting NAT .
	including CONFIGURATION .
	
	sorts GBState Mode .
	sorts BProcess Dispenser  .
	subsort BProcess Dispenser < Cid .
	subsort Nat < Oid .
	
	vars N N' M M' : Nat .
	vars C C' : Configuration .
	var S : Mode .

	ops sleep wait crit : -> Mode .
	op O : -> Oid .
	op [[_]] : Configuration -> GBState .
	
	---- class BProcess | mode: Mode, number: Nat .
	op BProcess : -> BProcess .
	op mode:_ : Mode -> Attribute [gather (&)] .
	op number:_ : Nat -> Attribute [gather (&)] . 

	---- class Dispenser | next: Nat, last: Nat .
	op Dispenser : -> Dispenser .
	op next:_ : Nat -> Attribute [gather (&)] .
	op last:_ : Nat -> Attribute [gather (&)] .	
	
	rl [to_wait] : 
		[[< O : Dispenser | next: N, last: M > 
		< N' : BProcess | mode: sleep, number: 0 > C ]] 
		=> 
		[[< O : Dispenser | next: N, last: s(M) > 
		< N' : BProcess | mode: wait, number: M > C ]] .
	rl [to_crit] : 
		[[< O : Dispenser | next: N, last: M > 
		< N' : BProcess | mode: wait, number: N > C ]] 
		=> 
		[[< O : Dispenser | next: N, last: M > 
		< N' : BProcess | mode: crit, number: N > C ]] .
	rl [to_sleep] : 
		[[< O : Dispenser | next: N, last: M > 
		< N' : BProcess | mode: crit, number: N > C ]] 
		=> 
		[[< O : Dispenser | next: s(N), last: M > 
		< N' : BProcess | mode: sleep, number: 0 > C ]] .

	op initial : Nat -> GBState .
	eq initial(N) = [[< O : Dispenser | next: 1, last: 1 > init(N)]] .
	
	op init : Nat -> Configuration .
	eq init(0) = none .
	eq init(s(N)) = < N : BProcess | mode: sleep, number: 0 > init(N) .
endm

mod ABSTRACT-BAKERY is 
	including BAKERY .

	var M : Mode . 
	var N N' : Nat .
	var C : Configuration .

	ceq [[< O : Dispenser | next: s(N), last: s(N') > C ]]
		= [[< O : Dispenser | next: N, last: N' > simplify(C) ]] 
		if N =/= 0 and N' =/= 0 .

	op simplify : Configuration -> Configuration .
	eq simplify(none) = none .
	eq simplify(< N : BProcess | mode: M, number: 0 > C) 
		= < N : BProcess | mode: M, number: 0 > simplify(C) .
	ceq simplify(< N : BProcess | mode: M, number: s(N') > C) 
		= < N : BProcess | mode: M, number: N' > simplify(C) 
		if N' =/= 0 .
endm

mod BAKERY-PREDS is 
	protecting ABSTRACT-BAKERY .
	including SATISFACTION .

	vars N N' M M' : Nat .
	vars C : Configuration .

	subsort GBState < State .

	op dissaster : -> Prop .
	eq [[ 
		< N : BProcess | mode: crit, number: M > 
		< N' : BProcess | mode: crit, number: M' > C ]]
		|= dissaster = true .
endm 

mod BAKERY-CHECK is 
	protecting BAKERY-PREDS .
    including MODEL-CHECKER .
    including LTL-SIMPLIFIER .
endm	 