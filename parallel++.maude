fmod MEMORY is
    pr INT .
    pr BOOL .
    pr LIST{Int} .
    pr LIST{Bool} .
  
    sorts Memory IntVar BoolVar .
    op none : -> Memory .
    op __ : Memory Memory -> Memory [assoc comm id: none] .
    op [_,_] : IntVar Int -> Memory .
    op [_,_] : BoolVar Bool -> Memory .
    op [_,_] : IntVar List{Int} -> Memory .
    op [_,_] : BoolVar List{Bool} -> Memory .

    op _in_ : IntVar Memory -> Bool .
    op _in_ : BoolVar Memory -> Bool .
    
    vars Q  W : IntVar .
    vars Q' Z : BoolVar .
    var M : Memory .
    var N : Int .
    var N' : Bool .
    var Li : List{Int} .
    var Lb : List{Bool} .
 
    eq Q in [Q, N] M = true .
    eq Q in M = false [owise] .

    eq Q' in [Q', N'] M = true .
    eq Q' in M = false [owise] .
  

    eq Q in [Q, Li] M = true .
    eq Q in M = false [owise] .

    eq Q' in [Q', Lb] M = true .
    eq Q' in M = false [owise] .

endfm


fmod EXPRESSION is
    including MEMORY .

    sort Test .

    sort BExpression .
    subsorts BoolVar Bool < BExpression .

    sort IExpression .
    subsorts IntVar Int < IExpression .

    var V' : IntVar .
    vars I I' : Int .
    vars IE IE' : IExpression .
    vars IB IB' : BExpression .


    var V : BoolVar .
    var M : Memory .
    vars B  : Bool .
    vars E E' : BExpression .
    vars T T' : Test .

    op _=_ : BExpression BExpression -> Test .
    op _!=_ : BExpression BExpression -> Test .
    op eval : BExpression Memory -> Bool .

    op _=_ : IExpression IExpression -> Test .
    op _>’_ : IExpression IExpression -> Test .
    op _!=_ : IExpression IExpression -> Test .

    op _&_ : Test Test -> Test [comm assoc] .
    op eval : IExpression Memory -> Int .

    op eval : Test Memory -> Bool .
     
    eq eval(B, M) = B .
    eq eval(V, [V, B] M) = B .
    eq eval(V, M) = false [owise] .

    eq eval(I, M) = I .
    eq eval(V', [V', I] M) = I .
    eq eval(V', M) = 0 [owise] .

    eq eval(T & T', M) = eval(T, M) and eval(T', M) .


    eq eval(IE' = IE, M) =  eval(IE,M) == eval(IE',M)  .
    eq eval(IE' >’ IE, M) =  eval(IE,M) > eval(IE',M)  .
    eq eval(IE' != IE, M) =  eval(IE,M) =/= eval(IE',M)  .

    eq eval(IB' = IB, M) =  eval(IB,M) == eval(IB',M)  .
    eq eval(IB' != IB, M) =  eval(IB,M) =/= eval(IB',M)  .

    op _+’_ : IExpression IExpression -> IExpression [ctor] .
    op _*’_ : IExpression IExpression -> IExpression [ctor] .
    op _-’_ : IExpression IExpression -> IExpression [ctor] .
    op eval : IExpression Memory -> Int .

    eq eval(IE +’ IE', M) = eval(IE, M) + eval(IE', M) .
    eq eval(IE *’ IE', M) = eval(IE, M) * eval(IE', M) .
    eq eval(IE -’ IE', M) = _-_ (eval(IE, M), eval(IE', M))  .

endfm

fmod ARRAYS is 
    pr EXPRESSION .

    sort AIExpression ABExpression .
    subsorts List{Bool} ABExpression < BExpression .
    subsorts List{Int} AIExpression  < IExpression .

    op _[_] :  IntVar IExpression -> AIExpression .
    op _[_] :  BoolVar IExpression -> ABExpression .

endfm

fmod SEQUENTIAL is
    protecting ARRAYS .
    protecting NAT .

    sorts UserStatement LoopingUserStatement Program .
    subsort LoopingUserStatement < UserStatement < Program .

    op skip : -> Program .
    op _;_ : Program Program -> Program [prec 61 assoc id: skip] .
    op _:=_ : BoolVar BExpression -> Program .
    op _:=_ : IntVar IExpression -> Program .
    op _:=_ : ABExpression BExpression -> Program .
    op _:=_ : AIExpression IExpression -> Program .

    op if_then_fi : Test Program -> Program .
    op while_do_od : Test Program -> Program .
    op repeat_forever : Program -> Program .
    op if_then_else_fi : Test Program Program -> Program . 
    op repeat_until_li : Program Test -> Program .

    op TookI : List{Int} Nat -> Int . 
    op TookB : List{Bool} Nat -> Bool . 

    var M : Memory .
    var Q' : BoolVar .
    var Q : IntVar .
    var B : List{Bool} .
    var v : Bool .
    var X : List{Int} .
    var v' : Int .
    var N : IExpression .
    var I : Nat .
    
    eq eval(Q'[N], [Q', B] M) = TookB(B,N) .
    ceq eval(Q'[N], M) = false if Q' in M == false  .

    eq eval(Q[N], [Q, X] M) = TookI(X,N) .
    ceq eval(Q[N], M) = 0 if Q in M == false  .

    eq TookB(v B, s(I)) = TookB(B, I) .
    eq TookB(v B, 0) = v .
    eq TookB(nil, I) = false .

    eq TookI(v' X, s(I)) = TookI(X, I) .
    eq TookI(v' X, 0) = v' .
    eq TookI(nil, I) = 0 .

endfm


mod PARALLEL++ is
    protecting SEQUENTIAL .
   

    sorts Pid Process Soup MachineState  .
    subsort Process < Soup .
    subsort Int < Pid .


    op [_,_] : Pid Program -> Process .
    op empty : -> Soup .
    op _|_ : Soup Soup -> Soup [prec 61 assoc comm id: empty] .
    op {_,_} : Soup Memory -> MachineState . 

    vars P R W : Program . 
    var S : Soup .
    var U : UserStatement . 
    var L : LoopingUserStatement .
    vars I J : Pid . 
    var M : Memory .
    var Q : IntVar . 
    var Q' : BoolVar . 
    vars X X' : Int .
    vars A A' : Bool .
    var T : Test . 
    vars IE IE' : IExpression .
    var BE : BExpression .
    var B : List{Bool} .
    var B' : List{Int} .
    var N : Nat .

    op insertI : List{Int} Int Nat -> List{Int} .

    eq insertI(X B',X', s(N)) = X insertI(B', X',N) .
    eq insertI(X B',X', 0) = X' B' .
    eq insertI(nil,X', s(N)) = 0 insertI(nil, X',N) . 
    eq insertI(nil,X', 0) = X' .

    op insertB : List{Bool} Bool Nat -> List{Bool} .

    eq insertB(A B,A', s(N)) = A insertB(B, A',N) .
    eq insertB(A B,A', 0) = A' B .
    eq insertB(nil,A', s(N)) = false insertB(nil, A',N) . 
    eq insertB(nil,A', 0) = A' .

    rl {[I, L ; R] | S, M} => {[I, L ; R] | S, M} .

    rl {[I, U ; R] | S, M} => {[I, R] | S, M} .

    rl {[I, (Q := IE) ; R] | S, [Q, X] M} => {[I, R] | S, [Q, eval(IE, [Q, X] M)] M} .
    rl {[I, (Q' := BE) ; R] | S, [Q', A] M} => {[I, R] | S, [Q', eval(BE, [Q', A] M)] M} .


    crl {[I, (Q := IE) ; R] | S, M} => {[I, R] | S, [Q, eval(IE, M)] M} 
    if Q in M == false .

    crl {[I, (Q' := BE) ; R] | S, M} => {[I, R] | S, [Q', eval(BE, M)] M} 
    if Q' in M == false .

    rl {[I, if T then P fi ; R] | S, M}  => {[I, if eval(T, M) then P else skip fi ; R] | S, M} .

   
    rl {[I, if T then P else W fi ; R] | S, M}  => {[I, if eval(T, M) then P else W fi ; R] | S, M}  .   

    rl {[I, repeat P until T li ; R] | S, M}  => {[I, (P ; if T then skip else (repeat P until T li) fi ; R)] | S, M} .
    

    rl {[I, while T do P od ; R] | S, M}  => {[I, if eval(T, M) then (P ; while T do P od) else skip fi ; R] | S, M} .

    rl {[I, repeat P forever ; R] | S, M} => {[I, P ; repeat P forever ; R] | S, M} .

    --- ARRAY OF BOOLEANS
    --- Array exists, insert
    rl [BArrayInsert] : {[I, (Q'[IE] := BE) ; R] | S, [Q', B] M} => {[I, R] | S, 
    [Q' ,insertB(B, eval(BE, [Q', B] M), eval(IE,[Q', B] M))] M} .


    --- Array does not exist, initialize
    crl [BArrayCreate] : {[I, (Q'[IE] := BE) ; R] | S, M} => {[I, R] | S, 
    [Q', insertB(nil, eval(BE, M), eval(IE,M))] M} 
    if Q' in M == false .

    --- ARRAY OF INTEGERS
    rl [IArrayInsert] : {[I, (Q[IE] := IE') ; R] | S, [Q, B'] M}  => {[I, R] | S, 
    [Q, insertI(B', eval(IE', [Q, B'] M), eval(IE, [Q, B'] M))] M} .


    crl [IArrayCreate] : {[I, (Q[IE] := IE') ; R] | S, M}  => {[I, R] | S,
    [Q, insertI(nil, eval(IE', M), eval(IE, M))] M} 
    if Q in M == false .

endm



