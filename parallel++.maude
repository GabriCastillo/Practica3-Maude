fmod MEMORY is
    pr INT .
    pr BOOL .
    pr LIST{Int} .
    pr LIST{Bool} .
  
    sorts Memory IntVar BoolVar .
    op none : -> Memory .
    op __ : Memory Memory -> Memory [assoc comm id: none] .
    op [_,_] : IntVar Int -> Memory .
    op [_,_] : BoolVar Bool -> Memory .
    op [_,_] : IntVar List{Int} -> Memory .
    op [_,_] : BoolVar List{Bool} -> Memory .

    op _in_ : IntVar Memory -> Bool .
    op _in_ : BoolVar Memory -> Bool .
    
    vars IV : IntVar .
    vars BV : BoolVar .
    var M : Memory .
    var I : Int .
    var B : Bool .
    var LI : List{Int} .
    var LB : List{Bool} .
 
    eq IV in [IV, I] M = true .
    eq IV in M = false [owise] .

    eq BV in [BV, B] M = true .
    eq BV in M = false [owise] .
  

    eq IV in [IV, LI] M = true .
    eq IV in M = false [owise] .

    eq BV in [BV, LB] M = true .
    eq BV in M = false [owise] .

endfm


fmod EXPRESSION is
    including MEMORY .

    sort Test .

    sort BExpression .
    subsorts BoolVar Bool < BExpression .

    sort IExpression .
    subsorts IntVar Int < IExpression .

    var IV : IntVar .
    vars I I' : Int .
    vars IE IE' : IExpression .
    vars IB IB' : BExpression .


    var BV : BoolVar .
    var M : Memory .
    vars B  : Bool .
    vars E E' : BExpression .
    vars T T' : Test .

    op _=_ : BExpression BExpression -> Test .
    op _!=_ : BExpression BExpression -> Test .
    op eval : BExpression Memory -> Bool .

    op _=_ : IExpression IExpression -> Test .
    op _>'_ : IExpression IExpression -> Test .
    op _!=_ : IExpression IExpression -> Test .

    op _&_ : Test Test -> Test [comm assoc] .
    op _|_ : Test Test -> Test [comm assoc] .
    op eval : IExpression Memory -> Int .

    op eval : Test Memory -> Bool .
     
    eq eval(B, M) = B .
    eq eval(BV, [BV, B] M) = B .
    eq eval(BV, M) = false [owise] .

    eq eval(I, M) = I .
    eq eval(IV, [IV, I] M) = I .
    eq eval(IV, M) = 0 [owise] .

    eq eval(T & T', M) = eval(T, M) and eval(T', M) .
    eq eval(T | T', M) = eval(T, M) or eval(T', M) .

    eq eval(IE' = IE, M) =  eval(IE,M) == eval(IE',M)  .
    eq eval(IE' >' IE, M) =  eval(IE,M) > eval(IE',M)  .
    eq eval(IE' != IE, M) =  eval(IE,M) =/= eval(IE',M)  .

    eq eval(IB' = IB, M) =  eval(IB,M) == eval(IB',M)  .
    eq eval(IB' != IB, M) =  eval(IB,M) =/= eval(IB',M)  .

    op _+'_ : IExpression IExpression -> IExpression [ctor] .
    op _*'_ : IExpression IExpression -> IExpression [ctor] .
    op _-'_ : IExpression IExpression -> IExpression [ctor] .
    op eval : IExpression Memory -> Int .

    eq eval(IE +' IE', M) = eval(IE, M) + eval(IE', M) .
    eq eval(IE *' IE', M) = eval(IE, M) * eval(IE', M) .
    eq eval(IE -' IE', M) = _-_ (eval(IE, M), eval(IE', M))  .

endfm

fmod ARRAYS is 
    pr EXPRESSION .

    sort AIExpression ABExpression .
    subsorts List{Bool} ABExpression < BExpression .
    subsorts List{Int} AIExpression  < IExpression .

    op _[_] :  IntVar IExpression -> AIExpression .
    op _[_] :  BoolVar IExpression -> ABExpression .

endfm

fmod SEQUENTIAL is
    protecting ARRAYS .
    protecting NAT .

    sorts UserStatement LoopingUserStatement Program .
    subsort LoopingUserStatement < UserStatement < Program .

    op skip : -> Program .
    op _;_ : Program Program -> Program [prec 61 assoc id: skip] .
    op _:=_ : BoolVar BExpression -> Program .
    op _:=_ : IntVar IExpression -> Program .
    op _:=_ : ABExpression BExpression -> Program .
    op _:=_ : AIExpression IExpression -> Program .

    op if_then_fi : Test Program -> Program .
    op while_do_od : Test Program -> Program .
    op repeat_forever : Program -> Program .
    op if_then_else_fi : Test Program Program -> Program . 
    op repeat_until_li : Program Test -> Program .

    op TookI : List{Int} Nat -> Int . 
    op TookB : List{Bool} Nat -> Bool . 

    var M : Memory .
    var BV : BoolVar .
    var IV : IntVar .
    var LB : List{Bool} .
    var B : Bool .
    var LI : List{Int} .
    var I : Int .
    var IE : IExpression .
    var N : Nat .
    
    eq eval(BV[IE], [BV, LB] M) = TookB(LB,IE) .
    ceq eval(BV[IE], M) = false if BV in M == false  .

    eq eval(IV[IE], [IV, LI] M) = TookI(LI,IE) .
    ceq eval(IV[IE], M) = 0 if IV in M == false  .

    eq TookB(B LB, s(N)) = TookB(LB, N) .
    eq TookB(B LB, 0) = B .
    eq TookB(nil, N) = false .

    eq TookI(I LI, s(N)) = TookI(LI, N) .
    eq TookI(I LI, 0) = I .
    eq TookI(nil, N) = 0 .

endfm


mod PARALLEL++ is
    protecting SEQUENTIAL .
   

    sorts Pid Process Soup MachineState  .
    subsort Process < Soup .
    subsort Int < Pid .


    op [_,_] : Pid Program -> Process .
    op empty : -> Soup .
    op _|_ : Soup Soup -> Soup [prec 61 assoc comm id: empty] .
    op {_,_} : Soup Memory -> MachineState . 

    vars P R W : Program . 
    var S : Soup .
    var U : UserStatement . 
    var L : LoopingUserStatement .
    vars I J : Pid . 
    var M : Memory .
    var IV : IntVar . 
    var BV : BoolVar . 
    vars X X' : Int .
    vars A A' : Bool .
    var T : Test . 
    vars IE IE' : IExpression .
    var BE : BExpression .
    var LB : List{Bool} .
    var LI : List{Int} .
    var N : Nat .

    op insertI : List{Int} Int Nat -> List{Int} .

    eq insertI(X LI,X', s(N)) = X insertI(LI, X',N) .
    eq insertI(X LI,X', 0) = X' LI .
    eq insertI(nil,X', s(N)) = 0 insertI(nil, X',N) . 
    eq insertI(nil,X', 0) = X' .

    op insertB : List{Bool} Bool Nat -> List{Bool} .

    eq insertB(A LB,A', s(N)) = A insertB(LB, A',N) .
    eq insertB(A LB,A', 0) = A' LB .
    eq insertB(nil,A', s(N)) = false insertB(nil, A',N) . 
    eq insertB(nil,A', 0) = A' .

    rl {[I, L ; R] | S, M} => {[I, L ; R] | S, M} .

    rl {[I, U ; R] | S, M} => {[I, R] | S, M} .

    rl {[I, (IV := IE) ; R] | S, [IV, X] M} => {[I, R] | S, [IV, eval(IE, [IV, X] M)] M} .
    rl {[I, (BV := BE) ; R] | S, [BV, A] M} => {[I, R] | S, [BV, eval(BE, [BV, A] M)] M} .


    crl {[I, (IV := IE) ; R] | S, M} => {[I, R] | S, [IV, eval(IE, M)] M} 
    if IV in M == false .

    crl {[I, (BV := BE) ; R] | S, M} => {[I, R] | S, [BV, eval(BE, M)] M} 
    if BV in M == false .

    rl {[I, if T then P fi ; R] | S, M}  => {[I, if eval(T, M) then P else skip fi ; R] | S, M} .

   
    rl {[I, if T then P else W fi ; R] | S, M}  => {[I, if eval(T, M) then P else W fi ; R] | S, M}  .   

    rl {[I, repeat P until T li ; R] | S, M}  => {[I, (P ; if T then skip else (repeat P until T li) fi ; R)] | S, M} .
    

    rl {[I, while T do P od ; R] | S, M}  => {[I, if eval(T, M) then (P ; while T do P od) else skip fi ; R] | S, M} .

    rl {[I, repeat P forever ; R] | S, M} => {[I, P ; repeat P forever ; R] | S, M} .

    rl {[I, (BV[IE] := BE) ; R] | S, [BV, LB] M} => {[I, R] | S, 
    [BV ,insertB(LB, eval(BE, [BV, LB] M), eval(IE,[BV, LB] M))] M} .


    crl {[I, (BV[IE] := BE) ; R] | S, M} => {[I, R] | S, 
    [BV, insertB(nil, eval(BE, M), eval(IE,M))] M} 
    if BV in M == false .

    rl {[I, (IV[IE] := IE') ; R] | S, [IV, LI] M}  => {[I, R] | S, 
    [IV, insertI(LI, eval(IE', [IV, LI] M), eval(IE, [IV, LI] M))] M} .


    crl {[I, (IV[IE] := IE') ; R] | S, M}  => {[I, R] | S,
    [IV, insertI(nil, eval(IE', M), eval(IE, M))] M} 
    if IV in M == false .

endm



