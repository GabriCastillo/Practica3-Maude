---- PARALLEL: A simple parallel language and its rewriting logic semantics.

---- Memory model with locations named by IntVars holding Ints.
--- Aux Bool module with undefined value
fmod VARIABLE is
   pr QID * (sort Qid to Var, op qid to var) .
   sorts IntVar BoolVar .
   subsort IntVar BoolVar < Var .
endfm

view IntVal from TRIV to INT is
	sort Elt to Int .
endv

view BoolVal from TRIV to BOOL is
	sort Elt to Bool .
endv

fmod MEMORY{Val :: TRIV} is
    extending VARIABLE .
    sorts Memory .
    op none : -> Memory .
    op __ : Memory Memory -> Memory [assoc comm id: none] .
    op [_,_] : Var Val$Elt -> Memory .
    op _in_ : Var Memory -> Bool .
    var Q  Q' : Var .
    var M : Memory .
    var N : Val$Elt .
    eq Q in [Q, N] M = true .
    eq Q in [Q', N] M = Q in M .
    eq Q in none = false .
endfm

---- Test comparing the contents of a named memory location to an integer. 
---- By default, value of non-allocated IntVar is 0.

fmod TESTS-INT is
    inc MEMORY{IntVal} * (sort Memory to IMemory) .
    sort ITest .
    op _=_ : IntVar Int -> ITest .
    op _>’_ : IntVar Int -> ITest .
    op _!=_ : IntVar Int -> ITest .

    op _=_ : BoolVar Bool -> ITest .
    op _>’_ : BoolVar Bool -> ITest .
    op _!=_ : BoolVar Bool -> ITest .

    op _&_ : ITest ITest -> ITest [assoc] .
    op eval : ITest IMemory -> Bool .
    var Q : IntVar .
    var M : IMemory .
    var N N’ K : Int .
    vars T T’ : ITest .
    eq eval(Q = N, [Q, N’] M) = N == N’ .
    ceq eval(Q = N, M) = N == 0 if Q in M =/= true .
    eq eval(Q >’ N, [Q, K] M) = K > N .
    eq eval(Q >’ N, M) = 0 > N [owise] .
    eq eval(T & T’, M) = eval(T, M) and eval(T’, M) .
endfm

fmod TESTS-BOOL is
    inc MEMORY{BoolVal} * (sort Memory to BMemory) .
    sort BTest .

    op _=_ : BoolVar Bool -> BTest .
    op _>’_ : BoolVar Bool -> BTest .
    op _!=_ : BoolVar Bool -> BTest .

    op _&_ : BTest BTest -> BTest [assoc] .
    op eval : BTest BMemory -> Bool .
    var Q : IntVar .
    var M : BMemory .
   --- var N N’ K : Int .
   --- vars T T’ : BTest .
    ---eq eval(Q = N, [Q, N’] M) = N == N’ .
    ---ceq eval(Q = N, M) = N == 0 if Q in M =/= true .
    ---eq eval(Q >’ N, [Q, K] M) = K > N .
    ---eq eval(Q >’ N, M) = 0 > N [owise] .
    ---eq eval(T & T’, M) = eval(T, M) and eval(T’, M) .
endfm

---- Syntax for arithmetic expressions, and their evaluation semantics.
---- To avoid evaluation of expressions by themselves, the operators
---- + and * are specified as constructors with syntax +’ and *’ 
fmod EXPRESSION-INT is
    protecting TESTS-INT .
    sort IExpression .
    subsorts IntVar Int < IExpression .
    op _+’_ : IExpression IExpression -> IExpression [ctor] .
    op _*’_ : IExpression IExpression -> IExpression [ctor] .
    op _-’_ : IExpression IExpression -> IExpression [ctor] .
    op eval : IExpression IMemory -> Int .
    var Q : IntVar .
    var M : IMemory .
    vars N N’ : Int .
    vars E E’ : IExpression .
    eq eval(N, M) = N .
    eq eval(Q, [Q, N] M) = N .
    eq eval(Q, M) = 0 [owise] .
    eq eval(E +’ E’, M) = eval(E, M) + eval(E’, M) .
    eq eval(E *’ E’, M) = eval(E, M) * eval(E’, M) .
    eq eval(E -’ E’, M) = eval(E, M) - eval(E’, M) .
endfm

fmod EXPRESSION-BOOL is
    protecting TESTS-BOOL .
    sort BExpression .
    subsorts BoolVar Bool < BExpression .
    op eval : BExpression BMemory -> Bool .
    var Q : BoolVar .
    var M : BMemory .
    vars N N’ : Bool .
    vars E E’ : BExpression .
    --- eq eval(N, M) = N .
    --- eq eval(Q, [Q, N] M) = N .
    --- eq eval(Q, M) = 0 [owise] .
    --- eq eval(E +’ E’, M) = eval(E, M) + eval(E’, M) .
    --- eq eval(E *’ E’, M) = eval(E, M) * eval(E’, M) .
    --- eq eval(E -’ E’, M) = eval(E, M) - eval(E’, M) .
endfm

---- Syntax for a trival sequential programming language. 
---- We allow abstracting out program fragments as elements of sorts LoopingUserStatement and UserStatement. 
---- LoopingUserStatements abstract out potentially nonterminating program fragments. 
---- UserStatements which are not LoopingUserStatements abstract out terminating program fragments.

fmod SEQUENTIAL-BOOL is
    protecting EXPRESSION-BOOL .
    sorts UserStatement LoopingUserStatement Program .
    subsort LoopingUserStatement < UserStatement < Program .
    op skip : -> Program .
    op _;_ : Program Program -> Program [prec 61 assoc id: skip] .
    op _:=_ : BoolVar BExpression -> Program .
    op _:=_ : BoolVar BExpression -> Program .
    op if_then_fi : BTest Program -> Program .
    op while_do_od : BTest Program -> Program .
    op repeat_forever : Program -> Program .
    op if_then_else_fi : BTest Program Program -> Program . 
    op repeat_until_li : Program BTest -> Program .
endfm

fmod SEQUENTIAL-INT is
    protecting EXPRESSION-INT .
    extending SEQUENTIAL-BOOL .
    op _:=_ : IntVar IExpression -> Program .
endfm


mod PARALLEL++ is
    inc SEQUENTIAL-INT .
    inc SEQUENTIAL-BOOL .
    sorts Pid Process Soup MachineState .
    subsort Process < Soup .
    subsort Int < Pid .
    op [_,_] : Pid Program -> Process .
    op empty : -> Soup .
    op _|_ : Soup Soup -> Soup [prec 61 assoc comm id: empty] .
    op {_,_} : Soup Memory -> MachineState .
    vars P R : Program . 
    var  S : Soup .
    var  U : UserStatement . 
    var  L : LoopingUserStatement .
    vars I J : Pid . 
    var  M : Memory .
    var  Q : IntVar . 
    vars N X : Int .
    var  T : Test . 
    var  E : Expression .
    rl {[I, L ; R] | S, M} => {[I, L ; R] | S, M} .
    rl {[I, U ; R] | S, M} => {[I, R] | S, M} .
    rl {[I, (Q := E) ; R] | S, [Q, X] M} 
      => {[I, R] | S, [Q, eval(E, [Q, X] M)] M} .
   crl {[I, (Q := E) ; R] | S, M} 
      => {[I, R] | S, [Q, eval(E, M)] M} 
      if Q in M =/= true .
    rl {[I, if T then P fi ; R] | S, M} 
      => {[I, if eval(T, M) then P else skip fi ; R] | S, M} .
    rl {[I, while T do P od ; R] | S, M} 
      => {[I, if eval(T, M) 
              then (P ; while T do P od) 
              else skip 
              fi ; R] | S, M} .
    rl {[I, repeat P forever ; R] | S, M} 
      => {[I, P ; repeat P forever ; R] | S, M} .
endm



